# -*- mode: perl -*-
# File/language association configuration file
#
#	$Id: filetype.conf,v 1.1 2012/02/04 12:49:26 ajlittoz Exp $
#

		#######################################
		# File vs. language association rules #
		#######################################

{
		# How to map files to languages
		# Note that the string for the key and the first entry in the
		# array MUST match
	'filetype' =>
			# Format is
			#	LXR_language_name =>
			#		[ ctags_language_name
			#		, filepattern regexp
			#		, module to invoke
			#		, (optional )tabwidth
			#		]
			# Note that to have another language supported by Generic.pm,
			# you must ensure that:
			# a) exuberant ctags supports it
			# b) generic.conf is updated to specify information about the language
			# c) the name of the language given here matches the entry in generic.conf
			# Some languages are commented out until the relevant entries in generic.conf are made
			# The list here is the set supported by ctags 5.8
		{
		 'ant' =>
			[ 'Ant'
			, '\.build\.xml$'
			, 'LXR::Lang::Generic'
			, '2'
			]
		,
		 'Assembler' =>
			[ 'Assembler'
			, '\.((?i)asm|S|A51|29[kK]|[68][68][kKsSxX]|x[68][68])$'
			, 'LXR::Lang::Generic'
			, '8'
			]
		,
		 'C' =>
			[ 'C'
			, '\.c$|\.pc$'
			, 'LXR::Lang::Generic'
			, '4'
			]
		,
		 'C++' =>
			[ 'C++'
			, '\.C$|((?i)\.c\+\+$|\.cc$|\.cpp$|\.cxx$|\.h$|\.hh$|\.hpp$|\.hxx$|\.h\+\+$)'    #'
			, 'LXR::Lang::Generic'
			, '4'
			]

		, 'dos' => [ 'DosBatch', '\.(bat|cmd)$', 'LXR::Lang::Generic', '4' ]

			# Some languages are commented out until the relevant entries in generic.conf are made
			# The list here is the set supported by ctags 5.0.1
#		, 'Beta'    => [ 'Beta',   '(?i)\.bet$', 'LXR::Lang::Generic', '4' ]
#		, 'Cobol' => [ 'Cobol',  '(?i)\.cob$', 'LXR::Lang::Cobol', '4' ]
#		, 'Eiffel'  => [ 'Eiffel', '(?i)\.e$',   'LXR::Lang::Generic', '4' ]
#		, 'Fortran' =>
#		[ 'Fortran', '(?i)\.f$|\.for$|\.ftn$|\.f77$|\.f90$|\.f95$', 'LXR::Lang::Generic', '4' ]

		, 'Java' => [ 'Java', '(?i)\.java$', 'LXR::Lang::Java', '4' ]

#		, 'Lisp' =>
#			[ 'Lisp'
#			, '(?i)\.cl$|\.clisp$|\.el$|\.l$|\.lisp$|\.lsp$|\.ml$'
#			, 'LXR::Lang::Generic'
#			, '4'
#			]

			# No tabwidth specified here as an example
		,
		 'Make' =>
			[ 'Make'
			, '(?i)\.mak$|(?i)\.mk$|Makefile*|Kbuild'
			, 'LXR::Lang::Generic'
			, '4'
			]

#		, 'Pascal' => [ 'Pascal', '(?i)\.p$|\.pas$',             'LXR::Lang::Generic' ]
		, 'Perl'   => [ 'Perl',   '(?i)\.plx?$|\.pm$|\.perl$',   'LXR::Lang::Perl', '4' ]
		, 'php'    => [ 'php',    '(?i)\.php$|\.php3$|\.phtml$', 'LXR::Lang::Generic', '2' ]
		, 'Python' => [ 'Python', '(?i)\.py$|\.python$',         'LXR::Lang::Generic', '4' ]

#		, 'rexx'   => [ 'rexx',   '(?i)\.cmd$|\.rexx$|\.rx$',       'LXR::Lang::Generic' ]
#		, 'ruby'   => [ 'ruby',   '(?i)\.rb$|\.ruby$,               'LXR::Lang::Ruby' ]
#		, 'scheme' => [ 'scheme', '(?i)\.sch$|\.scheme$|\.scm$|\.sm$', 'LXR::Lang::Generic' ]

		, 'shell' => [ 'shell', '(?i)\.sh$|\.bsh$|\.bash$|\.ksh$|\.zsh$', 'LXR::Lang::Generic' ]

#		, 's-Lang' => [ 's-Lang', '(?i)\.sl$',                        'LXR::Lang::Generic' ]
		, 'SQL' => [ 'SQL', '(?i)\.sql$|\.pks$|\.pkb$',               'LXR::Lang::Generic' ]
#		, 'VB'  => [ 'VB',  '(?i)\.bas$|\.cls$|\.ctl$|\.frm$|\.vbs$', 'LXR::Lang::Generic' ]
#		, 'tcl' => [ 'tcl', '(?i)\.tcl$|\.wish$',                     'LXR::Lang::Generic' ]
		}

		# Maps interpreter names to languages.  The format is:
		#  regexp => langname
		#   - regexp is matched against the tail part after #!
		#       on the first line of a file
		#       ($ is automatically added at the end of regexp
		#        to match only at the end of the interpreter
		#        name command)
		#   - langname must match one of the keys in filetype above.
		#
		# This mapping is only used if the filename doesn't match a pattern above, so
		# a shell script called shell.c will be recognised as a C file, not a shell file.

,	'interpreters' =>
		{ 'perl'	=> 'Perl'
		, 'ash'		=> 'shell'
		, 'bash'	=> 'shell'
		, 'csh'		=> 'shell'
		, 'dash'	=> 'shell'
		, 'python'	=> 'Python'
		, 'ksh'		=> 'shell'
		, 'zsh'		=> 'shell'
		, 'sh'		=> 'shell'
		, 'ksh'		=> 'shell'
		}
}
