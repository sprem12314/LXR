# -*- mode: perl -*-
# Configuration file
#
#	$Id: lxr.conf,v 1.40 2011/04/08 16:00:43 ajlittoz Exp $
#
(
		################################
		# Global configuration section #
		################################

	{
		# Auxiliary tools subsection #
		#============================#

		# Place where lxr can write temporary files
	  'tmpdir' => '/tmp/lxr'

		# Define this OR the swish-e variable depending which search engine you want to use.
		# Path to glimpse executables.
#	, 'glimpsebin'   => '/usr/local/bin/glimpse'
#	, 'glimpseindex' => '/usr/local/bin/glimpseindex'
		# Location of SWISH-E binary
#	, 'swishbin' => '/usr/local/bin/swish-e'
	, 'swishbin' => '/usr/bin/swish-e'
	, 'swishconf' => '/work/lxr/lxr/swish-e.conf'

		# Path to Exuberant Ctags executable
	, 'ectagsbin' => '/usr/bin/ctags'
		# Location of the ectags.conf file
#	, 'ectagsconf' => '/path/to/lib/LXR/Lang/ectags.conf'
	, 'ectagsconf' => '/work/lxr/lxr/lib/LXR/Lang/ectags.conf'

		# Paths for CVS module
	, 'cvspath' => '/bin:/usr/local/bin:/usr/bin:/usr/sbin'

		# Server DNS name
	, 'host_names' =>       [ 'http://localhost:888'
				, 'http://192.168.10.120:888'
				, 'http://epsy.ath.cx:888'
				]

		# HTML subsection #
		#=================#

		# All paths in this subsection are relative to LXR root directory

		# Templates used for headers and footers
	, 'htmlfatal'		=> 'templates/html-fatal.html'
	, 'htmlhead'		=> 'templates/html-head.html'
	, 'htmltail'		=> 'templates/html-tail.html'
	, 'htmldir'		=> 'templates/html-dir.html'
	, 'htmlident'		=> 'templates/html-ident.html'
	, 'htmlsearch'		=> 'templates/html-search-swish.html'
	, 'htmlconfig'		=> 'templates/html/html-config.html'

		# htmlhead and htmltail can be customised for the various
		# LXR operations. Just replace html by source (listing file),
		# sourcedir (displaying directory), diff (difference markup),
		# ident (identifier search), search (free-text search)
		# as below (which changes nothing):
#	, 'sourcehead'		=> 'templates/html-head.html'
#	, 'sourcedirhead'	=> 'templates/html-head.html'

		# Default identifier search constraint (in htmlident)
#	, 'identdefonly'	=> 1

		# CSS style sheet
	, 'stylesheet'		=> 'templates/lxr.css'

		# Default character encoding
#	, 'encoding'	=> 'iso-8859-1',
	, 'encoding'    => 'utf-8',

		# Max line length of left part in side by side diff
	, 'diffleftwidth' => 84

		# File content subsection #
		#=========================#

		# Which extensions to treat as images when browsing.  If a file is an image,
		# it is displayed.
	, 'graphicfile' =>
		'(bitmap|bmp|gif|icon|jp2|jpg|jpeg|pjpg|pjpeg|png|tif|tiff|xbm|xpm)'

#	, 'filetypeconf' => '%LXRroot%/templates/filetype.conf'
	, 'filetypeconf' => '/work/lxr/lxr/config/filetype.conf'

		# Location of the Generic.pm config file
#	, 'genericconf' => '/path/to/lib/LXR/Lang/generic.conf'
	, 'genericconf' => '/work/lxr/lxr/config/generic.conf'
	}

		###############################
		# Tree configuration sections #
		###############################

,	{

		# Server configuration subsection #
		#=================================#

	  'virtroot'    => '/lxr'   # The bit after the / above

		# Pattern for extracting tree name from URL
	, 'treeextract' => '([^/]*)/[^/]*$'

		# Character encoding (overrides default)
#	, 'encoding'	=> 'iso-8859-1'

		# a link of the form (prefix)($filepath)(postfix) is generated when viewing a file
		#   example for cvsweb:
#	, 'cvswebprefix' => 'http://cvs.myhost.com/cgi-bin/cvsweb.cgi'
#	, 'cvswebpostfix' => '?cvsroot=rootname'
		#   example for viewcvs:
#	, 'cvswebprefix' => 'http://cvs.myhost.com/cgi-bin/viewcvs.cgi/myroot'
#	, 'cvswebpostfix' => ''

		# Tree location subsection #
		#==========================#

		# sourceroot - where to get the source files from

		# For ordinary directories, this specifies a directory which has each version as a
		# subdirectory e.g.
		#  indexed-src/version1/...
		#  indexed-src/version2/...
		# The names of the version directories must match the values for the Version
		# variable (see the version selection subsection).
#	, 'sourceroot' => '/work/defy/android_kernel_omap/'
	, 'sourceroot' => '/kernel/'

		# Alternatively, this can specify a CVS repository by setting the value to "cvs:"
		# followed by the path to the repository.  Note this must be file accessible - remote
		# server access does NOT work.
#	, 'sourceroot'	=> 'cvs:/hom/karsk/a/CVSROOT/linux'

		# For a BitKeeper repository, specify bk: followed by the path to the
		# repository.  For BK it is also necessary to specify a 'cachepath' parameter in
		# the 'sourceparams' value below.  This should point to a directory where the
		# code can write and read files.
#	, 'sourceroot' => 'bk:/some/repository/here'

		# Finally, you can also use GIT, Linux Kernel's new
		# distributes SCM to access the history:
#	, 'sourceroot' => 'git:/work/defy/kernel_compare/android_kernel_omap/.git'
		# The `sourceroot' config variable points to the directory
		# in which you find the `objects', `refs', `index' etc.
		# directories.

		# The name to display for this source tree
	, 'sourcerootname' => '$v'

		#
		# Any parameters to the source access method should be specified below.
		#
		# BK:	'cachepath' is used for temporary files
		# GIT:	if `do_annotations' is non-zero, the file revision that
		#		introduced each line is displayed.
		#	`do_blame' will add the author of each line to the
		#		output. Keep in mind that the core LXR code
		#		will only request author information if
		#		annotations are switched on, too!
		#
	, 'sourceparams' =>
			{ 'cachepath'	=> '/tmp/lxr'
			, 'do_annotate'	=> 1,
			, 'do_blame'	=> 1
			}

		# Directories to always ignore. These usually are the SCM's
		# private directories which possibly may contain non-public
		# project history.
	, 'ignoredirs' => ['CVSROOT', '.git', '.svn']

		  # Version selection subsection #
		  #==============================#

	, 'variables' =>

			# Define typed variable "v".
		{ 'v' =>
			{ 'name' => 'Version'
				# This is the list of versions to index.
				# This can come from a file, a function or be explicitly
				# ennumerated.
				# From a file:
		#	, 'range' => [ readfile('src/versions') ]
				# Explicitly:
			, 'range' => [qw(2.6.32.y Defy-3.4.2-145 DefyPlus-4.5.3-109 Atrix-453-118 Atrix-2.6.32-CM Atrix-2.6.33 Tegra-2.6.36-AOSP Droid3-2.6.35 Droid4-2.6.35 LG-2.6.35 omap3-3.0 Linux-3.3)]
				# If files within a tree can have different versions,
				# e.g in a CVS tree, 'range' can be specified as a
				# function to call for each file:
		#	, 'range' => sub
		#		{ return	($files->allreleases($LXR::Common::pathname)
		#					,$files->allrevisions($LXR::Common::pathname)
		#					)
		#		}  # deferred function call.
				#
				# When using a GIT repo, you can use its tags
				# to create a list of versions. As an extra
				# bonus, with the Linux::KernelSort Perl module,
				# you can properly sort kernel versions. Just
				# leave it off for generic projects.
				#
				#	Simple example for any GIT repo:
		#	, 'range' => sub
		#		{ my $some_dir = "/work/defy/kernel_compare/android_kernel_omap/.git/refs/tags";
		#		  opendir (DIR, $some_dir) || die "cannot opendir $some_dir: $!";
		#		  my @files = grep { -f "$some_dir/$_" } readdir (DIR);
		#		  closedir DIR;
		#		  for (my $i = 0; $i < scalar (@files); $i++)
		#		  {
		#		  	$files[$i] =~ s/^motorola_//;
		#		  }
		#		  return sort @files;
		#		}
				#
				#	Advanced example for Linus's upstream
				#	linux-2.6 kernel repository:
				#	'range' => sub
				#		{
				#			use Linux::KernelSort;
				#			my $kernel = new Linux::KernelSort;
				#
				#			my $some_dir = "/path/to/linux-2.6/.git/refs/tags";
				#			opendir (DIR, $some_dir) || die "cannot opendir $some_dir: $!";
				#			my @files = grep { -f "$some_dir/$_" } readdir (DIR);
				#			closedir DIR;
				#		# Linus's tags all have a leading "v"
				#		# which we must cut off for sorting
				#		# add again afterwards.
				#			for (my $i = 0; $i < scalar (@files); $i++)
				#			{
				#				$files[$i] =~ s/^v//;
				#			}
				#			@files = $kernel->sort (@files);
				#			for (my $i = 0; $i < scalar (@files); $i++)
				#			{
				#				$files[$i] =~ s/^/v/;
				#			}
				#
				#			return @files;
				#		}

				# The default version to display
			, 'default' => 'Defy-3.4.2-145'
			}

			# Define typed variable "a".  First value is default.
		, 'a' =>
			{ 'name'  => 'Architecture'
			, 'range' => [qw(arm mips)]
			}
		}

		  # Subdirectory subsection #
		  #=========================#

		# where to look for include files inside the sourcetree.  This is used to hyperlink
		# to included files.
#	, 'incprefix' => [ '/include', '/include/linux' ]
		# For the 2.x-3.x Linux kernel, use
	, 'incprefix' => [ '/include', '/arch/xxx/include' ]
		# Leave the xxx as is. It is needed by the 'maps' rule
		# and will be transformed into the appropriate subdir name.

		# These do funky things to paths in the system - you probably don't need them.
	, 'maps' =>
			{
		#	  '/include/asm[^\/]*/' => '/include/asm-$a/',
		#	, '/arch/[^\/]+/'       => '/arch/$a/'
		#	, '/asm/' => '/arch/arm/include/asm/'
		#	, '/arch/[^\/]+/include/asm/' => '/asm/'
			}

		  # Data storage subsection #
		  #=========================#

		# The DBI identifier for the database to use
		# For mysql, the format is dbi:mysql:dbname=<name>
		# for Postgres, it is dbi:Pg:dbname=<name>
		# for Oracle, it is dbi:Oracle:host=localhost;sid=DEVMMS;port=1521
	, 'dbname' => 'dbi:mysql:dbname=lxr'

		# If you need to specify the username or password for the database connection,
		# uncomment the following two lines
	, 'dbpass'		=> 'foo'
	, 'dbuser'		=> 'lxr'

		# If you need multiple lxr configurations in one database, set different table
		# prefixes for them.
	, 'dbprefix' => 'lxr_'

		# For using glimpse, the directory to store the .glimpse files in is required
#	, 'glimpsedir' => '/path/to/glimpse/databases'

		# Location of swish-e index database files if using swish-e
	, 'swishdir' => '/work/lxr/swish-db/'
	}
)
